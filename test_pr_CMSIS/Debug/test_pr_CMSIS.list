
test_pr_CMSIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002a4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000438  08000440  00010440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000438  08000438  00010440  2**0
                  CONTENTS
  4 .ARM          00000000  08000438  08000438  00010440  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000438  08000440  00010440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000438  08000438  00010438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800043c  0800043c  0001043c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000440  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000440  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010440  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010470  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000fdb  00000000  00000000  000104b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000030e  00000000  00000000  0001148e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000090  00000000  00000000  000117a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000005f  00000000  00000000  00011830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000dc39  00000000  00000000  0001188f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000be3  00000000  00000000  0001f4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0004fae8  00000000  00000000  000200ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000148  00000000  00000000  0006fb94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0006fcdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000420 	.word	0x08000420

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000420 	.word	0x08000420

080001d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001d8:	4b06      	ldr	r3, [pc, #24]	; (80001f4 <SystemInit+0x20>)
 80001da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001de:	4a05      	ldr	r2, [pc, #20]	; (80001f4 <SystemInit+0x20>)
 80001e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80001e8:	bf00      	nop
 80001ea:	46bd      	mov	sp, r7
 80001ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	e000ed00 	.word	0xe000ed00

080001f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	4603      	mov	r3, r0
 8000200:	6039      	str	r1, [r7, #0]
 8000202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000208:	2b00      	cmp	r3, #0
 800020a:	db0a      	blt.n	8000222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800020c:	683b      	ldr	r3, [r7, #0]
 800020e:	b2da      	uxtb	r2, r3
 8000210:	490c      	ldr	r1, [pc, #48]	; (8000244 <__NVIC_SetPriority+0x4c>)
 8000212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000216:	0112      	lsls	r2, r2, #4
 8000218:	b2d2      	uxtb	r2, r2
 800021a:	440b      	add	r3, r1
 800021c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000220:	e00a      	b.n	8000238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	b2da      	uxtb	r2, r3
 8000226:	4908      	ldr	r1, [pc, #32]	; (8000248 <__NVIC_SetPriority+0x50>)
 8000228:	79fb      	ldrb	r3, [r7, #7]
 800022a:	f003 030f 	and.w	r3, r3, #15
 800022e:	3b04      	subs	r3, #4
 8000230:	0112      	lsls	r2, r2, #4
 8000232:	b2d2      	uxtb	r2, r2
 8000234:	440b      	add	r3, r1
 8000236:	761a      	strb	r2, [r3, #24]
}
 8000238:	bf00      	nop
 800023a:	370c      	adds	r7, #12
 800023c:	46bd      	mov	sp, r7
 800023e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000242:	4770      	bx	lr
 8000244:	e000e100 	.word	0xe000e100
 8000248:	e000ed00 	.word	0xe000ed00

0800024c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	3b01      	subs	r3, #1
 8000258:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800025c:	d301      	bcc.n	8000262 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800025e:	2301      	movs	r3, #1
 8000260:	e00f      	b.n	8000282 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000262:	4a0a      	ldr	r2, [pc, #40]	; (800028c <SysTick_Config+0x40>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	3b01      	subs	r3, #1
 8000268:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800026a:	210f      	movs	r1, #15
 800026c:	f04f 30ff 	mov.w	r0, #4294967295
 8000270:	f7ff ffc2 	bl	80001f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000274:	4b05      	ldr	r3, [pc, #20]	; (800028c <SysTick_Config+0x40>)
 8000276:	2200      	movs	r2, #0
 8000278:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800027a:	4b04      	ldr	r3, [pc, #16]	; (800028c <SysTick_Config+0x40>)
 800027c:	2207      	movs	r2, #7
 800027e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000280:	2300      	movs	r3, #0
}
 8000282:	4618      	mov	r0, r3
 8000284:	3708      	adds	r7, #8
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	e000e010 	.word	0xe000e010

08000290 <SysTick_Handler>:

     volatile uint32_t  SysTick_Count = 0;


      void  SysTick_Handler(void)
     {
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
    	if (SysTick_Count > 0) SysTick_Count --;
 8000294:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <SysTick_Handler+0x20>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d004      	beq.n	80002a6 <SysTick_Handler+0x16>
 800029c:	4b04      	ldr	r3, [pc, #16]	; (80002b0 <SysTick_Handler+0x20>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	3b01      	subs	r3, #1
 80002a2:	4a03      	ldr	r2, [pc, #12]	; (80002b0 <SysTick_Handler+0x20>)
 80002a4:	6013      	str	r3, [r2, #0]
    	}
 80002a6:	bf00      	nop
 80002a8:	46bd      	mov	sp, r7
 80002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ae:	4770      	bx	lr
 80002b0:	2000001c 	.word	0x2000001c

080002b4 <delay_ms>:

       void delay_ms(int ms)
    	{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
    		SysTick->LOAD = 16000-1;
 80002bc:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <delay_ms+0x30>)
 80002be:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80002c2:	605a      	str	r2, [r3, #4]
    		SysTick_Count = ms;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	4a08      	ldr	r2, [pc, #32]	; (80002e8 <delay_ms+0x34>)
 80002c8:	6013      	str	r3, [r2, #0]
    		while (SysTick_Count){}
 80002ca:	bf00      	nop
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <delay_ms+0x34>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d1fb      	bne.n	80002cc <delay_ms+0x18>
    	}
 80002d4:	bf00      	nop
 80002d6:	bf00      	nop
 80002d8:	370c      	adds	r7, #12
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	e000e010 	.word	0xe000e010
 80002e8:	2000001c 	.word	0x2000001c

080002ec <main>:

     int main (void)
    	{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0
    		uint32_t SystemCoreClock = 16000000;
 80002f2:	4b1f      	ldr	r3, [pc, #124]	; (8000370 <main+0x84>)
 80002f4:	60fb      	str	r3, [r7, #12]

    		RCC->AHB1ENR	|= RCC_AHB1ENR_GPIOAEN; //RCC on for GPIO C
 80002f6:	4b1f      	ldr	r3, [pc, #124]	; (8000374 <main+0x88>)
 80002f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002fa:	4a1e      	ldr	r2, [pc, #120]	; (8000374 <main+0x88>)
 80002fc:	f043 0301 	orr.w	r3, r3, #1
 8000300:	6313      	str	r3, [r2, #48]	; 0x30
    		GPIOA->MODER &= ~0x00000C00; /* clear pin mode */
 8000302:	4b1d      	ldr	r3, [pc, #116]	; (8000378 <main+0x8c>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	4a1c      	ldr	r2, [pc, #112]	; (8000378 <main+0x8c>)
 8000308:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800030c:	6013      	str	r3, [r2, #0]
    		GPIOA->MODER |= GPIO_MODER_MODER5_0; /* set pin to output mode */
 800030e:	4b1a      	ldr	r3, [pc, #104]	; (8000378 <main+0x8c>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4a19      	ldr	r2, [pc, #100]	; (8000378 <main+0x8c>)
 8000314:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000318:	6013      	str	r3, [r2, #0]

    		SysTick_Config(SystemCoreClock/1000); // set tick to every 1ms
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	4a17      	ldr	r2, [pc, #92]	; (800037c <main+0x90>)
 800031e:	fba2 2303 	umull	r2, r3, r2, r3
 8000322:	099b      	lsrs	r3, r3, #6
 8000324:	4618      	mov	r0, r3
 8000326:	f7ff ff91 	bl	800024c <SysTick_Config>
    		DWT->CTRL |= 1;
 800032a:	4b15      	ldr	r3, [pc, #84]	; (8000380 <main+0x94>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	4a14      	ldr	r2, [pc, #80]	; (8000380 <main+0x94>)
 8000330:	f043 0301 	orr.w	r3, r3, #1
 8000334:	6013      	str	r3, [r2, #0]
    		DWT->CYCCNT = 0;
 8000336:	4b12      	ldr	r3, [pc, #72]	; (8000380 <main+0x94>)
 8000338:	2200      	movs	r2, #0
 800033a:	605a      	str	r2, [r3, #4]

   		while(1) {
   				uint32_t start = DWT->CYCCNT;
 800033c:	4b10      	ldr	r3, [pc, #64]	; (8000380 <main+0x94>)
 800033e:	685b      	ldr	r3, [r3, #4]
 8000340:	60bb      	str	r3, [r7, #8]
   				GPIOA->BSRR = GPIO_BSRR_BS5;
 8000342:	4b0d      	ldr	r3, [pc, #52]	; (8000378 <main+0x8c>)
 8000344:	2220      	movs	r2, #32
 8000346:	619a      	str	r2, [r3, #24]
   				uint32_t end = DWT->CYCCNT;
 8000348:	4b0d      	ldr	r3, [pc, #52]	; (8000380 <main+0x94>)
 800034a:	685b      	ldr	r3, [r3, #4]
 800034c:	607b      	str	r3, [r7, #4]
   				uint32_t cycles = end - start;
 800034e:	687a      	ldr	r2, [r7, #4]
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	1ad3      	subs	r3, r2, r3
 8000354:	603b      	str	r3, [r7, #0]
    			delay_ms(1000);
 8000356:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800035a:	f7ff ffab 	bl	80002b4 <delay_ms>
   				GPIOA->BSRR = GPIO_BSRR_BR5;
 800035e:	4b06      	ldr	r3, [pc, #24]	; (8000378 <main+0x8c>)
 8000360:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000364:	619a      	str	r2, [r3, #24]
    			delay_ms(1000);
 8000366:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800036a:	f7ff ffa3 	bl	80002b4 <delay_ms>
   		while(1) {
 800036e:	e7e5      	b.n	800033c <main+0x50>
 8000370:	00f42400 	.word	0x00f42400
 8000374:	40023800 	.word	0x40023800
 8000378:	40020000 	.word	0x40020000
 800037c:	10624dd3 	.word	0x10624dd3
 8000380:	e0001000 	.word	0xe0001000

08000384 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000384:	480d      	ldr	r0, [pc, #52]	; (80003bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000386:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000388:	f7ff ff24 	bl	80001d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800038c:	480c      	ldr	r0, [pc, #48]	; (80003c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800038e:	490d      	ldr	r1, [pc, #52]	; (80003c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000390:	4a0d      	ldr	r2, [pc, #52]	; (80003c8 <LoopForever+0xe>)
  movs r3, #0
 8000392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000394:	e002      	b.n	800039c <LoopCopyDataInit>

08000396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800039a:	3304      	adds	r3, #4

0800039c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800039c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800039e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003a0:	d3f9      	bcc.n	8000396 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003a2:	4a0a      	ldr	r2, [pc, #40]	; (80003cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80003a4:	4c0a      	ldr	r4, [pc, #40]	; (80003d0 <LoopForever+0x16>)
  movs r3, #0
 80003a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003a8:	e001      	b.n	80003ae <LoopFillZerobss>

080003aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003ac:	3204      	adds	r2, #4

080003ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003b0:	d3fb      	bcc.n	80003aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003b2:	f000 f811 	bl	80003d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003b6:	f7ff ff99 	bl	80002ec <main>

080003ba <LoopForever>:

LoopForever:
  b LoopForever
 80003ba:	e7fe      	b.n	80003ba <LoopForever>
  ldr   r0, =_estack
 80003bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003c4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003c8:	08000440 	.word	0x08000440
  ldr r2, =_sbss
 80003cc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003d0:	20000020 	.word	0x20000020

080003d4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003d4:	e7fe      	b.n	80003d4 <ADC_IRQHandler>
	...

080003d8 <__libc_init_array>:
 80003d8:	b570      	push	{r4, r5, r6, lr}
 80003da:	4d0d      	ldr	r5, [pc, #52]	; (8000410 <__libc_init_array+0x38>)
 80003dc:	4c0d      	ldr	r4, [pc, #52]	; (8000414 <__libc_init_array+0x3c>)
 80003de:	1b64      	subs	r4, r4, r5
 80003e0:	10a4      	asrs	r4, r4, #2
 80003e2:	2600      	movs	r6, #0
 80003e4:	42a6      	cmp	r6, r4
 80003e6:	d109      	bne.n	80003fc <__libc_init_array+0x24>
 80003e8:	4d0b      	ldr	r5, [pc, #44]	; (8000418 <__libc_init_array+0x40>)
 80003ea:	4c0c      	ldr	r4, [pc, #48]	; (800041c <__libc_init_array+0x44>)
 80003ec:	f000 f818 	bl	8000420 <_init>
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	10a4      	asrs	r4, r4, #2
 80003f4:	2600      	movs	r6, #0
 80003f6:	42a6      	cmp	r6, r4
 80003f8:	d105      	bne.n	8000406 <__libc_init_array+0x2e>
 80003fa:	bd70      	pop	{r4, r5, r6, pc}
 80003fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000400:	4798      	blx	r3
 8000402:	3601      	adds	r6, #1
 8000404:	e7ee      	b.n	80003e4 <__libc_init_array+0xc>
 8000406:	f855 3b04 	ldr.w	r3, [r5], #4
 800040a:	4798      	blx	r3
 800040c:	3601      	adds	r6, #1
 800040e:	e7f2      	b.n	80003f6 <__libc_init_array+0x1e>
 8000410:	08000438 	.word	0x08000438
 8000414:	08000438 	.word	0x08000438
 8000418:	08000438 	.word	0x08000438
 800041c:	0800043c 	.word	0x0800043c

08000420 <_init>:
 8000420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000422:	bf00      	nop
 8000424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000426:	bc08      	pop	{r3}
 8000428:	469e      	mov	lr, r3
 800042a:	4770      	bx	lr

0800042c <_fini>:
 800042c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042e:	bf00      	nop
 8000430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000432:	bc08      	pop	{r3}
 8000434:	469e      	mov	lr, r3
 8000436:	4770      	bx	lr
